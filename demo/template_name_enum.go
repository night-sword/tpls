// Code generated by "enumer --type=TemplateName --extramethod --linecomment --output=template_name_enum.go"; DO NOT EDIT.

package demo

import (
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TemplateDemo-1]
}

const _TemplateName_name = "tpl/demo.tmpl"

var _TemplateName_index = [...]uint8{0, 13}

func (i TemplateName) String() string {
	i -= 1
	if i >= TemplateName(len(_TemplateName_index)-1) {
		return "TemplateName(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _TemplateName_name[_TemplateName_index[i]:_TemplateName_index[i+1]]
}

var _TemplateName_values = []TemplateName{1}

var _TemplateName_name_to_value_map = map[string]TemplateName{
	_TemplateName_name[0:13]: 1,
}

// TemplateNameFromStr converts a string to the TemplateName enum type; if the input is not a valid enum value, an error is thrown.
func TemplateNameFromStr(s string) (TemplateName, error) {
	if val, ok := _TemplateName_name_to_value_map[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("not valid enum")
}

// TemplateNameFromInt Convert an int value to the TemplateName enum type; if the input is not a valid enum value, throw an error.
func TemplateNameFromInt(i int) (TemplateName, error) {
	if _TemplateNameIsValid(i) {
		return TemplateName(i), nil
	}
	return 0, fmt.Errorf("not valid enum")
}

// TemplateNameFromInt64 Convert an int64 value to the TemplateName enum type; throw an error if the input is not a valid enum value.
func TemplateNameFromInt64(i int64) (TemplateName, error) {
	return TemplateNameFromInt(int(i))
}

// IsValid check if the enum value is valid.
func (i TemplateName) IsValid() bool {
	return _TemplateNameIsValid(int(i))
}

// Check validate if the enum value is valid, and throw an error if it's invalid.
func (i TemplateName) Check() (err error) {
	if is := i.IsValid(); !is {
		err = fmt.Errorf("not valid enum")
	}
	return err
}

type TemplateNameSlice []TemplateName

// Has determined if the given enum value is in the current array.
func (inst TemplateNameSlice) Has(i TemplateName) bool {
	for _, v := range inst {
		if i == v {
			return true
		}
	}
	return false
}

// Strings Convert the array of enums to an array of strings.
func (inst TemplateNameSlice) Strings() []string {
	ss := make([]string, len(inst))
	for i, v := range inst {
		ss[i] = v.String()
	}
	return ss
}

// TemplateNameValues Return all enum values of type TemplateName.
func TemplateNameValues() TemplateNameSlice {
	return _TemplateName_values
}

// TemplateNameFromStrs convert a string array to an array of TemplateName enums; throw an error if the input string is not a valid enum value.
func TemplateNameFromStrs(ss []string) (TemplateNameSlice, error) {
	es := make(TemplateNameSlice, 0, len(ss))
	for _, s := range ss {
		v, err := TemplateNameFromStr(s)
		if err != nil {
			return nil, err
		}
		es = append(es, v)
	}
	return es, nil
}

// TemplateNameFromInts convert an array of int to an array of TemplateName enums; throw an error if the input is not a valid enum value.
func TemplateNameFromInts(ints []int) (TemplateNameSlice, error) {
	es := make(TemplateNameSlice, 0, len(ints))
	for _, i := range ints {
		v, err := TemplateNameFromInt(i)
		if err != nil {
			return nil, err
		}
		es = append(es, v)
	}
	return es, nil
}

// TemplateNameFromInt64s Convert an array of int64s to an array of TemplateName enums; throw an error if the input is not a valid enum value.
func TemplateNameFromInt64s(int64s []int64) (TemplateNameSlice, error) {
	ints := make([]int, 0, len(int64s))
	for _, i := range int64s {
		ints = append(ints, int(i))
	}
	return TemplateNameFromInts(ints)
}

// _TemplateNameIsValid Check if the int is a valid enum value.
func _TemplateNameIsValid(i int) bool {
	for _, v := range _TemplateName_values {
		if i == int(v) {
			return true
		}
	}
	return false
}
